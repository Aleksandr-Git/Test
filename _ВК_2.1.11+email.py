#ищет и сохраняет фото аваторок ВК на компе, которые можно увидеть без авторизации
#для хранения фото для каждой тысячи проверенных страниц (не фото) создается своя папка с номером, соответствующему порядковому номеру тысячи
#фото страничек без аватарок проверяет и пропускает
#выводи ID страницы, на которой есть фото, но произошла ошибка при поиске фамилии и имени человека
#выводит ID страничек, на которых нужна авторизация для просмотра фото аватарки
#выводит и отправляет на почту количество неучтенных (непонятных) ошибок ID стрвницы с которыми не хочется разбираться, т.к. их пока мало
#по достижению пяти непонятных ошибок поиск прекращается 
#выводит итоговые результаты и отправляет на почту
#---------------------------------------------------------------------------------------------------

import urllib.request
import re
import smtplib
import os

#URL_VK = 'https://vk.com/id330420934'#для теста
URL_VK = 'https://vk.com/id'#заготовка для URL странички
ID = 92990 #начальный номер id страницы. можно начать с ID = 1
COUNT_photo = 0 #счетчик найденных фото
COUNT_vk = 0 #счетчик проверенных страниц
COUNT_err = 0 #счетчик ошибок при поиске фамилии и имени человека. можно попробовать доработать регулярное выражение по поску фамилии и имени
COUNT_err_photo = 0 #счетчик ошибок при скачивании фото. скорей встего, эта ошибка возникает при необходимости авторизации
ERROR = 0 #счетчик непонятных ошибок, с которыми неохота бороться, т.к. их пока очень мало
N = 20 # количество проверяемых страниц
FOLDER = 0 # номер папки для записи фоток

FROM = "vasaisvanov@gmail.com" #адрес отправки письма
TO = "gavryukov@mail.ru" #адрес получателя
SUBJECT = "Test VK" #тема письма

#шаблон для поиска второй половины ссылки, которая переводит на страничку с фотографией в большом разрешении
#ссылку нужно соединить с https://vk.com
SHABLON = r'(<a href=[\'\"])(/photo[^\'\"]*)([\'\"]>)'

#шаблон для поска ссылки на файл с фотографией
SHABLON_2 = r'(<img src=[\'\"])(https://[^\'\"]*)([\'\"] )(class=[\'\"]ph_img[\'\"])( alt=[\'\"])([^\'\"]*)'

#шаблон для поиска ссылки с именем
SHABLON_3 = r'(<img src=[\'\"])(https://[^\'\"]*)([\'\"] )(class=[\'\"]pp_img[\'\"])( alt=[\'\"])([^\'\"]*)'


def pochta(body): # отправляет сообщение на почту. необходимо сформировать письмо и передать в качестве параметра. Данная функция отправляет только с адресов gmail.com.

    smtpObj = smtplib.SMTP('smtp.gmail.com', 587)# установка соединения с почтовым сервером по протоколу SMTP, порт для сервера gmail 587
    smtpObj.starttls()# установка защищенного соединения с сервером по протоколу TLS
    smtpObj.login('vasaisvanov@gmail.com','Asdf210781')#авторизация на почтовом сервере
    smtpObj.sendmail(FROM, TO, body)# отправка письма
    smtpObj.quit()# разрыв соединеиня с сервером

def fun(n): # заходит на страничку VK, ищет ссылку на страничку с фоткой владельца в большом разрешении, переходит на эту страницу, создает папку для каждой тысячи ID (не фото) и сохраняет фотку на компе. В качестве аргумента передается количество проверяемых сраниц

    global URL_VK, ID, COUNT_photo, COUNT_vk, COUNT_err, COUNT_err_photo, N, FROM, TO, SUBJECT, SHABLON, SHABLON_2, SHABLON_3, FOLDER
    
    for i in range(n): #количество проверяемых страниц

        FOLDER = ID // 1000 #определяем номер папки путем получения целой части от деления ID на 1000. В каждую папку записываются фото в пределах диапазона каждой тысячи ID

        if os.path.isdir('./NF_test_' + str(FOLDER)) == False:# проверка наличия необходимой папки. если нужной папки нет
            os.mkdir('./NF_test_' + str(FOLDER))# создаем ее  

        try: #попытка прочитать страницу с кодировкой 'windows-1251'
            with urllib.request.urlopen(URL_VK + str(ID)) as f:#подставляем в заготовку URL номер ID
                h = f.read().decode('windows-1251')
                #print(f.getcode()) #для тестов
                #print(f.geturl()) #для тестов

        except UnicodeDecodeError: #попытка прочитать страницу с кодировкой 'utf-8'
            with urllib.request.urlopen(URL_VK + str(ID)) as f:#подставляем в заготовку URL номер ID
                h = f.read().decode('utf-8')
                #print(f.getcode()) #для тестов
                #print(f.geturl()) #для тестов
        
        if re.findall(SHABLON, h) and re.findall(SHABLON_3, h): #если на страницке есть нужная ссылка на фото и имя человека
            result = re.findall(SHABLON, h) #записываем результат поиска фото в переменную
            #print(result) #для тестов
            #print(result[0][1]) #для тестов
            #print(result[0][1]) #для тестов
            result_3 = re.findall(SHABLON_3, h) #записываем результат поика фамилии и имени в переменную

            try: #попытка прочитать страницу с кодировкой 'windows-1251'
                with urllib.request.urlopen('https://vk.com' + result[0][1]) as f_2: #переход на страничку с большой фотографией
                    h_2 = f_2.read().decode('windows-1251')

            except UnicodeDecodeError: #попытка прочитать страницу с кодировкой 'utf-8'
                with urllib.request.urlopen('https://vk.com' + result[0][1]) as f_2: #переход на страничку с большой фотографией
                    h_2 = f_2.read().decode('utf-8')

            if re.findall(SHABLON_2, h_2): #ищем ссылку на файл с большой фотографией
                result_2 = re.findall(SHABLON_2, h_2) #записываем результат поиска большого фото в переменную
                #print(result_2[0][1]) #для тестов

                try: #попытка считть ссылку с большой фотографией
                    f_3 = urllib.request.urlopen(result_2[0][1]).read() 

                except urllib.error.HTTPError: #эта ошибка возникает, если нужна авторизация на странице
                    print('Фото не скачалось id' + str(ID))
                    COUNT_err_photo += 1 # увеличиваем счетчик ошиибок при скачивании фото
                    COUNT_vk += 1 #счетчик проверенных страниц
                    ID = ID + 1 # увеличиваем ID странички для следующей итерации цикла
                    #print(ID) #для тестов
                    N = N - 1 #уменьшаем количество проверяемых страниц, для случая перезапуска функции при обнуружении непонятных ошибок ERROR 
                    continue # переход на следующий этап цикла

                with open('./NF_test_' + str(FOLDER) + '/' + result_3[0][5] + '-id' + str(ID) + '.jpg', 'wb') as fvk: #записываем фотографию в бинарном виде в файл, который помещаем в соответствующую папку
                    fvk.write(f_3)

            COUNT_photo += 1#счетчик найденых фото

        elif re.findall(SHABLON, h) and len(re.findall(SHABLON_3, h)) == 0:
            COUNT_err += 1#счетчик ошибок при поиске фамилии и имени человека
            print('Ошибка при определении фамилии и имени на странице id' + str(ID))

        COUNT_vk += 1#счетчик проверенных страниц

        ID = ID + 1 # увеличиваем ID странички для следующей итерации цикла
        #print(ID) #для тестов
        N = N - 1 #уменьшаем количество проверяемых страниц, для случая перезапуска функции при обнуружении непонятных ошибок ERROR

        if COUNT_vk % 10 == 0 and COUNT_vk != 0:# выводим данные о количестве проверенных страниц через каждые 10 страниц
            print('Проверено ' + str(COUNT_vk) + ' станиц')

    print('----------------------------------')
    print('Всего проверено страниц -', COUNT_vk)
    print('Найдено фото -', COUNT_photo)
    print('Ошибок использования шаблона для поиска фамилии и имени -', COUNT_err)
    print('Ошибок при скачивании фото -', COUNT_err_photo)
    print('----------------------------------')

    #переменные для формирования текста письма. понимает только латиницу
    text_1 = 'Only pages that are checked - ' + str(COUNT_vk)
    text_2 = 'Found photos - ' + str(COUNT_photo)
    text_3 = 'Misuse of the pattern to search for first and last name - ' + str(COUNT_err)
    text_4 = 'Errors when downloading photos - ' + str(COUNT_err_photo)

    #форма письма
    body = "\n".join((
        "From: %s" % FROM,
        "To: %s" % TO,
        "Subject: %s" % SUBJECT ,
        "",
        text_1,
        text_2,
        text_3,
        text_4
    ))

    pochta(body) # отправляем результат на почту
	
def start_VK(): # запускает функцию fun с перехватом неучтенных (непонятных) ошибок. В слуае перехвата ошибок, перезапускает сама себя, пока количество ошибок не превысит пять штук

    global ERROR, ID

    ERROR += 1 # увеличиваем счетчик непонятных ошибок

    try:
        fun(N)

    except Exception: # перехват неучтенных (непонятных) ошибок в функцмии fun

        print('ERROR#' + str(ERROR) + '_ID' + str(ID))
    
        #форма письма
        body = "\n".join((
            "From: %s" % FROM,
            "To: %s" % TO,
            "Subject: %s" % SUBJECT ,
            "",
            'ERROR#' + str(ERROR) + '_ID' + str(ID)
        ))

        pochta(body) # отправляем сообщение ERROR и ID страницы на которой произошла ошибка

        ID += 1 # увеличиваем ID странички для следующей итерации цикла, т.к. из-за непонятной ошибки, скорей всего, увеличить счетчик в функции fun не получилось

        if ERROR < 5: # если ошибка повторилась менее пяти раз, перезапускаем программу
            start_VK()

start_VK()

